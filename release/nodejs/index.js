var Ctrl8=require("ctrl8").Ctrl8,Cir8={Count:0,Pack:function(a){return new CPack(a)},Wire:function(a){return new CConduit({Name:a?a:"Wire"+Cir8.Count++})},Connect:function(a,b,c){a.Connect(b,c);b.Connect(a,c)},Dis:function(a,b,c){a.DisconnectWith(b,c);b.DisconnectWith(a,c)},Link:function(a,b,c,d){var e=new CConduit;this.Connect(a,e,b);this.Connect(d,e,c);return e},MultiLink:function(){var a=arguments.length;if(0<(a&1))throw"Both Component and Contact are required";for(var b=new CConduit,c=0;c<a;c++)b.Connect(a[c],
a[c+1]);return b}};function CComp(a){CComp.baseConstructor.call(this,a);this.Prop("Name",Date.now()+CComp.CCount++)}CComp.Count=0;Ctrl8.ExtendsTo(CComp);CComp.prototype.Connect=function(a,b){};CComp.prototype.OnVibration=function(a,b,c){};CComp.prototype.DisconnectWith=function(a,b){};function C1Way(a){C1Way.baseConstructor.call(this,a);this._.Contacts={}}CComp.ExtendsTo(C1Way);
C1Way.prototype.Connect=function(a,b){if("In"!==b&&"Out"!==b)throw"Only contacts available are In and Out";var c=this._.Contacts[b];c?c===a?1:c.Connect(a,b):this._.Contacts[b]=a};C1Way.prototype.OnVibration=function(a,b,c){"In"===b&&this._.Contacts[b]===a&&this._.Contacts[b].OnVibration(this,b,c)};C1Way.prototype.DisconnectWith=function(a,b){this._.Contacts[b]&&(delete this._.Contacts[b],a.DisconnectWith(this,b))};
function CConduit(a){CConduit.baseConstructor.call(this,a);this._.Contacts=[];this.Prop("ParallelTrx",!1);this.CalcProp("Signal",function(a,c){return null},function(a,c,d){this.OnVibration(null,null,a)})}CComp.ExtendsTo(CConduit);CConduit.prototype.Connect=function(a,b){this._.Contacts.every(function(c){return c.Comp!==a||c.Contact!==b})?(this._.Contacts.push({Contact:b,Comp:a}),a.Connect(this,b)):0};
CConduit.prototype.OnVibration=function(a,b,c){var d=this;this._.Contacts.forEach(function(e){if(e.Comp!==a||e.Contact!==b)d.ParallelTrx?setTimeout(CConduit.PVibrate,0,e.Comp,d,e.Contact,c):e.Comp.OnVibration(d,e.Contact,c)})};CConduit.prototype.DisconnectWith=function(a,b){var c;this._.Contacts.every(function(d,e){c=e;return d.Comp!==a||d.Contact!==b})?1:(this._.Contacts.splice(c,1),a.DisconnectWith(this,b))};CConduit.PVibrate=function(a,b,c,d){a.OnVibration(b,c,d)};
function CPort(a){CPort.baseConstructor.call(this,a);this._.Contacts={}}CComp.ExtendsTo(CPort);CPort.Get=function(a,b){var c=this._.Contacts[a];return c?c.v:void 0};CPort.Set=function(a,b,c){(c=this._.Contacts[b])&&c.c.OnVibration(this,b,a)};
function CPack(a){CPack.baseConstructor.call(this,a);this._.Collected=0;this._.HasInputs={};this.Prop("Ins",[]);this.Prop("Props",{});this.Prop("FX",function(){});this.DrillProp("Ports",this._.Props.Ports,CPort);this.Prop("Staged",!1,0,function(a){this._.Collected=0;this._.HasInputs={}});this.Prop("InitFX",function(){});this.InitFX.call(this)}CComp.ExtendsTo(CPack);
CPack.prototype.Connect=function(a,b){var c=this.Ports,d=c._.Contacts[b];d?d.c!=a&&d.c.Connect(a,b):(c._.Contacts[b]={c:a},c.hasOwnProperty(b)||c.CalcProp(b,CPort.Get,CPort.Set,1,void 0,1),a.Connect(this,b))};
CPack.prototype.OnVibration=function(a,b,c){0<=this.Ins.indexOf(b)&&(a=this._.HasInputs[b],this._.HasInputs[b]=1,this.Ports._.Contacts[b].v=c,this.Staged?void 0===a&&++this._.Collected==this.Ins.length?(this.FX(),this._.Collected=0,this._.HasInputs={}):1:++this._.Collected>=this.Ins.length?this.FX():1)};CPack.prototype.DisconnectWith=function(a,b){var c=this.Ports,d=c._.Contacts[b];d&&d.c==a&&(delete c._.Contacts[b],delete c[b],a.DisconnectWith(this,b))};
module.exports={Cir8:Cir8,CComp:CComp,CPack:CPack,CConduit:CConduit,C1Way:C1Way};
